REM BEGIN Tests for the pumpkin spice language

ERROR_COUNT = 0
SUBROUTINE ERROR WORDS
  ERROR_COUNT = ERROR_COUNT + 1
  COLOR 4
  SAY WORDS
END SUBROUTINE

REM This is woefully incomplete
REM Test all of the expression variants
REM Test all of the statements
REM Test all of the builtin functions

REM Test " in a comment
 REM Test " in a comment
 ' Test " in an apostrophe comment
' Test " in an apostrophe comment

REM Test subroutine expressions and recursion

DIFF = 0.00001
TOTAL = 0
FOR N = 2-1 TO 10*1
  TOTAL = TOTAL + N
NEXT N
IF TOTAL <> 55
  ERROR("FOR LOOP ISSUE?")
END IF
STOTAL = "!"
WHILE TOTAL > 0
  FOR N = 1 TO 11
    TOTAL = TOTAL-1
  NEXT N
  STOTAL = "B"+STOTAL
WEND
IF STOTAL != "BBBBB!"
  ERROR("NESTED LOOP OR WHILE ISSUE?")
ELSE
  Q = 3
END IF
IF Q <> 3 THEN
  ERROR("ELSE TROUBLE")
END IF
IF 5+5*5+5 != 35 THEN
  ERROR("ORDER OF OPERATIONS ERROR")
END IF
IF (1+1*1+1)+(1+1*1+1)*(1+1*1+1)+(1+1*1+1) <> 15
  ERROR("ORDER OF OPERATIONS ERROR!")
END IF
IF CINT(1.5) <> 2 THEN
  ERROR("ROUNDING IS BROKEN!")
END IF
IF CINT(-1.5) <> -1 THEN
  ERROR("ROUNDING IS BROKEN!!")
END IF
IF INT(1.5) <> 1 THEN
  ERROR("ROUNDING IS BROKEN!")
END IF
IF INT(-1.5) <> -2 THEN
  ERROR("ROUNDING IS BROKEN!!")
END IF
IF FIX(1.5) <> 1 THEN
  ERROR("ROUNDING IS BROKEN!!!")
END IF
IF FIX(-1.5) <> -1 THEN
  ERROR("ROUNDING IS BROKEN!!!!")
END IF
IF ABS(PI-3.14159) > DIFF THEN
  ERROR("PI IS BROKEN!")
END IF
REM The chance of two matching is 1/(2^32)
'   The chance of that 2^16 times is
'
TESTR1 = 0
TESTR2 = 0
TESTR3 = 0
TESTR4 = 0
TESTR5 = 0
TESTR6 = 0
TESTR7 = 0
TESTR8 = 0
TESTRLOW = 0
TESTRHIGH = 0
FOR N = 1 TO 1024
  TESTNUMBER = RANDOM(1,8)
  IF TESTNUMBER == 1 THEN
    TESTR1 = TESTR1 + 1
  END IF
  IF TESTNUMBER == 2 THEN
    TESTR2 = TESTR2 + 1
  END IF
  IF TESTNUMBER == 3 THEN
    TESTR3 = TESTR3 + 1
  END IF
  IF TESTNUMBER == 4 THEN
    TESTR4 = TESTR4 + 1
  END IF
  IF TESTNUMBER == 5 THEN
    TESTR5 = TESTR5 + 1
  END IF
  IF TESTNUMBER == 6 THEN
    TESTR6 = TESTR6 + 1
  END IF
  IF TESTNUMBER == 7 THEN
    TESTR7 = TESTR7 + 1
  END IF
  IF TESTNUMBER == 8 THEN
    TESTR8 = TESTR8 + 1
  END IF
  IF TESTNUMBER < 1 THEN
    TESTRLOW = TESTRLOW + 1
  END IF
  IF TESTNUMBER > 8 THEN
    TESTRHIGH = TESTRHIGH + 1
  END IF
NEXT N
IF TESTRLOW <> 0
  ERROR("RANDOM is broken: value too low")
END IF
IF TESTRHIGH <> 0
  ERROR("RANDOM is broken: value too high")
END IF
IF TESTR1 == 0 OR TESTR2 == 0 OR TESTR3 == 0 OR TESTR4 == 0 OR TESTR5 == 0 OR TESTR6 == 0 OR TESTR7 == 0 OR TESTR8 == 0 THEN
  ERROR("RANDOM is broken: value never generated")
END IF
IF TESTR1+TESTR2+TESTR3+TESTR4+TESTR5+TESTR6+TESTR7+TESTR8+TESTRLOW+TESTRHIGH != 1024 THEN
  ERROR("RANDOM is broken: non-integer values")
END IF
IF "42" <> TEXT(042) THEN
  ERROR("TEXT() is broken")
END IF
IF "42" <> TEXT(42) THEN
  ERROR("TEXT() is broken!")
END IF
IF "-42" <> TEXT(-042) THEN
  ERROR("TEXT() is broken!!")
END IF
IF "-42" <> TEXT(-42) THEN
  ERROR("TEXT() is broken!!!")
END IF
IF NUMBER("42") <> 42
  ERROR("NUMBER() is broken")
END IF
IF NUMBER(" 42 ") <> 42
  ERROR("NUMBER() is broken!")
END IF
IF NUMBER(" 042 ") <> 42
  ERROR("NUMBER() is broken!!")
END IF
IF NUMBER("-42") <> -42
  ERROR("NUMBER() is broken!!!")
END IF
IF NUMBER("-042") <> -42
  ERROR("NUMBER() is broken!!!!")
END IF
IF NUMBER(" -042 ") <> -42
  ERROR("NUMBER() is broken!!!!!")
END IF
IF LEN("") <> 0
  ERROR("LEN IS broken")
END IF
IF LEN("a") <> 1
  ERROR("LEN IS broken!")
END IF
IF LEN("abc") <> 3
  ERROR("LEN IS broken!!")
END IF
IF LEFT("ABCD",3) <> "ABC"
  ERROR("LEFT broke")
END IF
IF LEFT("ABC",4) <> "ABC"
  ERROR("LEFT broke!")
END IF
IF RIGHT("ABCD",3) <> "BCD"
  ERROR("RIGHT broke")
END IF
IF RIGHT("ABC",4) <> "ABC"
  ERROR("RIGHT broke!")
END IF
SUMTOXXX(5,7)
IF XXX != 12 THEN
   ERROR("SUBROUTINE ISSUES")
END IF
SUBROUTINE SUMTOXXX QQQ, ZZZ
   XXX = QQQ + ZZZ
END SUBROUTINE
SUMTOXXX(4,40)
IF XXX != 44 THEN
   ERROR("SUBROUTINE ISSUES!")
END IF

SUBROUTINE PLUSONE X
  RETURN X+1
END SUBROUTINE

PLUSONE(100)
XXX = PLUSONE(7)
IF XXX != 8 THEN
  ERROR("SUBROUTINE EXPRESSION ISSUES!")
END IF

IF 3 != PLUSONE(2) THEN
  ERROR("SUBROUTINE EXPRESSION ISSUES!!")
END IF

IF PLUSONE (PLUSONE(1)) != PLUSONE(2) THEN
  ERROR("SUBROUTINE EXPRESSION ISSUES!!!")
END IF

REM TEST THAT SUBROUTINES ARE CALLED EVERY TIME THROUGH
XXX = 0
WHILE PLUSONE (PLUSONE(1)) != PLUSONE(XXX)
  XXX = PLUSONE(XXX)
END WHILE
IF XXX != 2
  ERROR("SUBROUTINE EXPRESSION ISSUES!!!!")
END IF

REM TEST THAT SUBROUTINES ARE ONLY CALLED TO SET UP THE LOOP
Q = 9
TOTAL=0
FOR N = PLUSONE(Q)-9 TO PLUSONE(Q)
  TOTAL = TOTAL + N
  Q = 0
NEXT N
IF TOTAL <> 55
  ERROR("FOR LOOP ISSUE WITH SUBROUTINE EXPRESIONS")
END IF

REM Test parens on boolean expressions
IF (0==1)
  ERROR("IF ISSUES")
END IF
IF ( (0==1))
  ERROR("IF ISSUES!")
END IF
IF (((0)==(1)))
  ERROR("IF ISSUES!!")
END IF

REM Test boolean operators
IF (0==1) OR (0==1)
  ERROR("BOOL OPERATOR ISSUES")
END IF
IF ( (0==1)) OR ( (0==1))
  ERROR("BOOL OPERATOR ISSUES!")
END IF
IF (((0)==(1))) OR (((0)==(1)))
  ERROR("BOOL OPERATOR ISSUES!!")
END IF
IF (0==1) AND (0==1)
  ERROR("BOOL OPERATOR ISSUES!!!")
END IF
IF ( (0==1)) AND ( (0==1))
  ERROR("BOOL OPERATOR ISSUES!!!!")
END IF
IF (((0)==(1))) AND (((0)==(1)))
  ERROR("BOOL OPERATOR ISSUES!!!!!")
END IF
IF ((0==1) OR (0==1))
  ERROR("BOOL OPERATOR ISSUES!!!!!!")
END IF
IF (( (0==1)) OR ( (0==1)))
  ERROR("BOOL OPERATOR ISSUES!!!!!!!")
END IF
IF ((((0)==(1))) OR (((0)==(1))))
  ERROR("BOOL OPERATOR ISSUES!!!!!!!!")
END IF
IF ((0==1) AND (0==1))
  ERROR("BOOL OPERATOR ISSUES!!!!!!!!!")
END IF
IF (( (0==1)) AND ( (0==1)))
  ERROR("BOOL OPERATOR ISSUES!!!!!!!!!!")
END IF
IF ((((0)==(1))) AND (((0)==(1))))
  ERROR("BOOL OPERATOR ISSUES!!!!!!!!!!!")
END IF
IF ((0==1) AND (1==1))
  ERROR("BOOL OPERATOR ISSUES!!!!!!!!!!!!")
END IF
IF (( (1==1)) AND ( (0==1)))
  ERROR("BOOL OPERATOR ISSUES!!!!!!!!!!!!!")
END IF
IF ((((1)==(1))) AND (((0)==(1))))
  ERROR("BOOL OPERATOR ISSUES!!!!!!!!!!!!!!")
END IF
IF 1==0 OR 1==1 THEN
  BOOL_TEST = 1
ELSE
  BOOL_TEST = 0
END IF
IF BOOL_TEST=0
  ERROR("BOOL OPERATOR ISSUES!!!!!!!!!!!!!!!")
END IF
IF 2==2 AND "1"=="1" THEN
  BOOL_TEST = 1
ELSE
  BOOL_TEST = 0
END IF
IF BOOL_TEST=0
  ERROR("BOOL OPERATOR ISSUES!!!!!!!!!!!!!!!!")
END IF

IF (NOT 1==1) OR NOT (0==0)
  ERROR("BOOL NOT OPERATOR ISSUES")
END IF
IF ( NOT ("A"=="A")) OR ( (NOT 1==1))
  ERROR("BOOL NOT OPERATOR ISSUES!")
END IF
IF NOT ((0==1) OR (1==1))
  ERROR("BOOL NOT OPERATOR ISSUES!!")
END IF
IF NOT (NOT ( (0==1)) OR ( (0==1)))
  ERROR("BOOL NOT OPERATOR ISSUES!!!")
END IF
IF NOT (( (1==1)) AND ( (0==0)))
  ERROR("BOOL NOT OPERATOR ISSUES!!!!")
END IF
IF NOT 1==0 OR 1==1 THEN
  BOOL_TEST = 1
ELSE
  BOOL_TEST = 0
END IF
IF BOOL_TEST=0
  ERROR("BOOL NOT OPERATOR ISSUES!!!!!")
END IF
IF NOT (1==1 AND "A"=="1") THEN
  BOOL_TEST = 1
ELSE
  BOOL_TEST = 0
END IF
IF BOOL_TEST=0
  ERROR("BOOL NOT OPERATOR ISSUES!!!!!!")
END IF

SUBROUTINE TEST_SUM_TO N
  IF N<=0
    RETURN 0
  ELSE
    RETURN N+TEST_SUM_TO(N-1)
  END IF
END SUBROUTINE

REM Test with a comma in the parameter
TEST_SUM_TO(RANDOM(1,5))
XXX = TEST_SUM_TO(RANDOM(1,5))

IF TEST_SUM_TO(10) != 55
  ERROR("ERROR WITH RECURSION")
END IF

IF TEST_SUM_TO(10)+TEST_SUM_TO(10) != 110
  ERROR("ERROR WITH RECURSION!")
END IF

IF TEXT(5)+"-"+TEXT(6) != "5-6"
  ERROR("ERROR WITH BINARY STRING EXPRESSIONS")
END IF

REM return N if N is a power of 2, otherwise the next lower power of 2
SUBROUTINE TEST_RECURSE N
  IF N > 1
    RETURN TEST_RECURSE(FIX(N/2))+TEST_RECURSE(FIX(N/2))
  ELSE
    RETURN 1
  END IF
END SUBROUTINE

IF 16 != TEST_RECURSE(16) THEN
  ERROR("ERROR IN SUBEXPRESSION RECURSION")
END IF

TEST_LONG = "012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789"
IF LEN(TEST_LONG) <> 255 THEN
  ERROR("ERROR HANDLING VERY LONG STRINGS")
END IF
TEST_ONEHUN = "0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789"
TEST_QHUN   = "QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ"
TEST_LONG2 = TEST_ONEHUN+TEST_ONEHUN+TEST_ONEHUN
IF LEN(TEST_LONG) <> 255 THEN
  ERROR("ERROR HANDLING VERY LONG STRINGS!")
END IF
IF TEST_LONG != TEST_LONG2 THEN
  ERROR("ERROR HANDLING VERY LONG STRINGS!!")
END IF
TEST_LONG = TEST_ONEHUN+TEST_QHUN
TEST_LONG = TEST_LONG+TEST_ONEHUN
TEST_LONG2 = TEST_ONEHUN+TEST_QHUN+TEST_ONEHUN
IF LEN(TEST_LONG) <> 255 THEN
  ERROR("ERROR HANDLING VERY LONG STRINGS!!!")
END IF
IF TEST_LONG != TEST_LONG2 THEN
  ERROR("ERROR HANDLING VERY LONG STRINGS!!!!")
END IF

IF "y" = "Y"
 ' PASS
ELSE
  ERROR("Case insensitive comparison failed")
END IF

IF "y" <> "Y"
   ERROR("Case insensitive comparison failed!")
END IF

XXX = 0
SUBROUTINE BARE_RETURN
  IF 1 + 1 = 2
    RETURN
  END IF
  XXX = 1
END SUBROUTINE
BARE_RETURN()
IF XXX <> 0
  ERROR("RETURN statement fail")
END IF
' Check that
' XXX = BARE_RETURN()
' Generates an error

IF NEVER_SET_NUMERIC <> 0
  ERROR("Numeric variable initialization failed")
END IF

IF NEVER_SET_TEXT <> ""
  ERROR("String variable initialization failed")
END IF

REM Interactive test for subroutines within ASK prompts

REM TEST_PROMPT = "First prompt!"
REM SUBROUTINE GET_PROMPT
REM   TEST_PROMPT_TEMP = TEST_PROMPT
REM   TEST_PROMPT = "Second prompt !"
REM   RETURN TEST_PROMPT_TEMP
REM END SUBROUTINE

REM ASK GET_PROMPT()
REM END ASK

REM END Tests for the pumpkin spice language

IF ERROR_COUNT = 0
  COLOR 2
  SAY "NO ERRORS FOUND! ðŸŽ‰ðŸŽˆ"
ELSE
  COLOR 1
  SAY TEXT(ERROR_COUNT)+" ERRORS!"
END IF
