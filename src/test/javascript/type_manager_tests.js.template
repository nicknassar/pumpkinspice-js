function TypeManagerTests(display) {
  {{type_manager.js}}

  var successCount = 0;
  var errorCount = 0;

  // Failures for the CURRENT test
  var failures = [];

  function getSuccessCount() {
    return successCount;
  }

  function getErrorCount() {
    return errorCount;
  }

  function assert(test, message) {
    if (test !== true)
      failures.push(message);
  }

  var tests = [
    {
      description: "single global string",
      run: function(typeManager, logger) {
        typeManager.genTypesForStringExpression(typeManager.typeExpressionForGlobal("NAME"));
        typeManager.validate();

        assert(typeManager.globalHasStringType("NAME"),
               "string type is set");
        assert(!(typeManager.globalHasNumericType("NAME") ||
                 typeManager.globalHasUndefinedType("NAME")),
               "other type is not set");
        assert(logger.getLog().length === 0,
               "Errors found: "+logger.getLog().join(", "));
      }
    },
    {
      description: "single global number",
      run: function(typeManager, logger) {
        typeManager.genTypesForNumericExpression(typeManager.typeExpressionForGlobal("NUM"));
        typeManager.validate();

        assert(typeManager.globalHasNumericType("NUM"),
               "numeric type is set");
        assert(!(typeManager.globalHasStringType("NUM") ||
                 typeManager.globalHasUndefinedType("NUM")),
               "other type is not set");
        assert(logger.getLog().length === 0,
               "Errors found: "+logger.getLog().join(", "));
      }
    },
  ];

  function printFailure(description, failures) {
    display.setColor(4);
    display.print("TestManager failed test \""+description+"\":\n");
    display.setColor(15);
    for (var i=0;i<failures.length;i++) {
      display.print(failures[i]+"\n");
    }
    display.setColor(7);
    display.print("\n");
  }

  function check(typeManager, logger, test) {
    failures = [];

    test.run(typeManager, logger);
    if (failures.length > 0) {
      printFailure(test.description, failures);
      errorCount++;
    } else {
      successCount++;
    }
  }

  function run() {
    for (var i=0;i<tests.length;i++) {
      var test = tests[i];
      var logger = TestingLogger();
      var typeManager = TypeManager(logger);
      check(typeManager, logger, tests[i]);
    }
    display.sendUpdates();
  }

  return {
    run:run,
    getSuccessCount:getSuccessCount,
    getErrorCount:getErrorCount
  };
}
