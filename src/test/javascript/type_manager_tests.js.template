function TypeManagerTests(display) {
  {{type_manager.js}}

  var successCount = 0;
  var errorCount = 0;

  // Failures for the CURRENT test
  var failures = [];

  function getSuccessCount() {
    return successCount;
  }

  function getErrorCount() {
    return errorCount;
  }

  function assert(test, message) {
    if (test !== true)
      failures.push(message);
  }

  var tests = [
    // BEGIN tests for global variables
    {
      description: "single global string",
      run: function(typeManager, logger) {
        assert(typeManager.genTypesForStringExpression(typeManager.typeExpressionForGlobal("NAME")) !== null,
               "type was generated");
        assert(typeManager.validate(), "validates");

        assert(typeManager.globalHasStringType("NAME"),
               "string type is set");
        assert(!typeManager.globalHasNumericType("NAME"),
               "numeric type is not set");
        assert(typeManager.getStringGlobals().length === 1 &&
               typeManager.getStringGlobals().indexOf("NAME") === 0,
               "global is reported");
        assert(typeManager.getNumericGlobals().length === 0,
               "no other global variables found");
        assert(logger.getLog().length === 0,
               "Errors found: "+logger.getLog().join(", "));
      }
    },
    {
      description: "single global number",
      run: function(typeManager, logger) {
        assert(typeManager.genTypesForNumericExpression(typeManager.typeExpressionForGlobal("NUM")) !== null,
               "type was generated");
        assert(typeManager.validate(), "validates");

        assert(typeManager.globalHasNumericType("NUM"),
               "numeric type is set");
        assert(!typeManager.globalHasStringType("NUM"),
               "string type is not set");
        assert(typeManager.getNumericGlobals().length === 1 &&
               typeManager.getNumericGlobals().indexOf("NUM") === 0,
               "global is reported")
        assert(typeManager.getStringGlobals().length === 0,
               "no other global variables found");
        assert(logger.getLog().length === 0,
               "Errors found: "+logger.getLog().join(", "));
      }
    },
    {
      description: "ambiguous global - number then string",
      run: function(typeManager, logger) {
        logger.setLineNumber(1);
        assert(typeManager.genTypesForNumericExpression(typeManager.typeExpressionForGlobal("AMBIGUOUS")) !== null,
               "first type generates no errors");
        logger.setLineNumber(2);
        assert(typeManager.genTypesForStringExpression(typeManager.typeExpressionForGlobal("AMBIGUOUS")) === null,
               "second type generates a null");
        assert(typeManager.validate() === false, "does not validate");
        assert(logger.getLog().length === 1 && logger.getLog()[0][0] === 2,
               "expected error message is set on correct line");
      }
    },
    {
      description: "ambiguous global - string then number",
      run: function(typeManager, logger) {
        logger.setLineNumber(1);
        assert(typeManager.genTypesForStringExpression(typeManager.typeExpressionForGlobal("AMBIGUOUS")) !== null,
               "first type generates no errors");
        logger.setLineNumber(2);
        assert(typeManager.genTypesForNumericExpression(typeManager.typeExpressionForGlobal("AMBIGUOUS")) === null,
               "second type generates a null");
        assert(typeManager.validate() === false, "does not validate");
        assert(logger.getLog().length === 1 && logger.getLog()[0][0] === 2,
               "expected error message is set on correct line");
      }
    },
    {
      description: "ambiguous global - combined expression",
      run: function(typeManager, logger) {
        logger.setLineNumber(1);
        assert(typeManager.genTypesForStringExpression(typeManager.typeExpressionForGlobal("TXT")) !== null,
               "first type generates no errors");
        logger.setLineNumber(2);
        assert(typeManager.genTypesForNumericExpression(typeManager.typeExpressionForGlobal("NUM")) !== null,
               "second type generates no errors");
        logger.setLineNumber(3);
        assert(typeManager.genTypesForExpressionPair(typeManager.typeExpressionForGlobal("NUM"),
                                                     typeManager.typeExpressionForGlobal("TXT")) === null,
               "combined type generates errors");

        assert(typeManager.validate() === false, "does not validate");
        assert(logger.getLog().length === 1 && logger.getLog()[0][0] === 3,
               "expected error message is set on correct line");
      }
    },
    {
      description: "boolean global",
      run: function(typeManager, logger) {
        logger.setLineNumber(1);
        assert(typeManager.genTypesForBoolExpression(typeManager.typeExpressionForGlobal("NUM")) === null,
               "setting global to bool type generates errors");
        assert(typeManager.validate() === false, "does not validate");
        assert(logger.getLog().length === 1 && logger.getLog()[0][0] === 1,
               "expected error message is set on correct line");
      }
    }
    // END tests for global variables
  ];

  function printFailure(description, failures) {
    display.setColor(4);
    display.print("TestManager failed test \"");
    display.setColor(12);
    display.print(description);
    display.setColor(4);
    display.print("\":\n");

    for (var i=0;i<failures.length;i++) {
      display.setColor(7);
      display.print("Assertion \"");
      display.setColor(15);
      display.print(failures[i]);
      display.setColor(7);
      display.print("\" failed\n");
    }
    display.print("\n");
  }

  function check(typeManager, logger, test) {
    failures = [];

    test.run(typeManager, logger);
    if (failures.length > 0) {
      printFailure(test.description, failures);
      errorCount++;
    } else {
      successCount++;
    }
  }

  function run() {
    for (var i=0;i<tests.length;i++) {
      var test = tests[i];
      var logger = TestingLogger();
      var typeManager = TypeManager(logger);
      check(typeManager, logger, tests[i]);
    }
    display.sendUpdates();
  }

  return {
    run:run,
    getSuccessCount:getSuccessCount,
    getErrorCount:getErrorCount
  };
}
