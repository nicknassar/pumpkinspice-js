function TypeGeneratorPassTests(display) {
  {{type_generator_pass.js}}
  {{testing_type_manager.js}}

  // variables reset for each run
  var logger;
  var typeManager;
  var typeGeneratorPass;
  function setup() {
    logger = TestingLogger();
    typeManager = TestingTypeManager();
    typeGeneratorPass = TypeGeneratorPass(typeManager, logger);
  }

  // List of objects with description, function to run, the expected
  // calls into the type manager, and the expected errors

  // The testing type manager returns the number of
  // an expression. The values that are from expressions
  // refer to the order in which handler functions were called
  var expectations = [
    {
      description: "Hello World",
      run: function() {
        typeGeneratorPass.printString("Hello World!", true, false);
        typeGeneratorPass.finalize();
      },
      calls: [
        ["validate"]
      ],
      errors: []
    },
    {
      description: "PRINT paren expression",
      run: function() {
        typeGeneratorPass.printExp(
          typeGeneratorPass.parenExpression(
            typeGeneratorPass.stringLiteralExpression("somestring")), true, false);
        typeGeneratorPass.finalize();
      },
      calls: [
        ["stringType"],
        ["typeForStringExpression", 0],
        ["validate"]
      ],
      errors: []
    },
    {
      description: "PRINT double paren expression",
      run: function() {
        typeGeneratorPass.printExp(
          typeGeneratorPass.parenExpression(
            typeGeneratorPass.parenExpression(
              typeGeneratorPass.stringLiteralExpression("somestring"))), true, false);
        typeGeneratorPass.finalize();
      },
      calls: [
        ["stringType"],
        ["typeForStringExpression", 0],
        ["validate"]
      ],
      errors: []
    },
    {
      description: "PRINT string concatenation expression",
      run: function() {
        typeGeneratorPass.printExp(
          typeGeneratorPass.additionExpression(
            typeGeneratorPass.stringLiteralExpression("string"),
            typeGeneratorPass.stringLiteralExpression("string")
          ),
          true,
          false);
        typeGeneratorPass.finalize();
      },
      calls: [
        ["stringType"],
        ["stringType"],
        ["typeForPair", 0, 1],
        ["typeForStringExpression", 2],
        ["validate"]
      ],
      errors: []
    },
    {
      description: "PRINT string multi concatenation expression",
      run: function() {
        typeGeneratorPass.printExp(
          typeGeneratorPass.additionExpression(
            typeGeneratorPass.stringLiteralExpression("string"),
            typeGeneratorPass.stringLiteralExpression("string")
          ),
          true,
          false);
        typeGeneratorPass.finalize();
      },
      calls: [
        ["stringType"],
        ["stringType"],
        ["typeForPair", 0, 1],
        ["typeForStringExpression", 2],
        ["validate"]
      ],
      errors: []
    },
    {
      description: "PRINT variable",
      run: function() {
        typeGeneratorPass.printExp(
          typeGeneratorPass.variableExpression("VARIABLE"),
          true,
          false);
        typeGeneratorPass.finalize();
      },
      calls: [
        ["typeForGlobal", "VARIABLE"],
        ["typeForStringExpression", 0],
        ["validate"]
      ],
      errors: []
    },
    {
      description: "PRINT variable+literal",
      run: function() {
        typeGeneratorPass.printExp(
          typeGeneratorPass.additionExpression(
            typeGeneratorPass.variableExpression("VARIABLE"),
            typeGeneratorPass.stringLiteralExpression("Literally")
          ),
          true,
          false);
        typeGeneratorPass.finalize();
      },
      calls: [
        ["typeForGlobal", "VARIABLE"],
        ["stringType"],
        ["typeForPair", 0, 1],
        ["typeForStringExpression", 2],
        ["validate"]
      ],
      errors: []
    },
    {
      description: "COLOR statement",
      run: function() {
        typeGeneratorPass.color(
          typeGeneratorPass.numericLiteralExpression("7"));
        typeGeneratorPass.finalize();
      },
      calls: [
        ["numericType"],
        ["typeForNumericExpression", 0],
        ["validate"]
      ],
      errors: []
    },
    {
      description: "COLOR statement with expression",
      run: function() {
        typeGeneratorPass.color(
          typeGeneratorPass.additionExpression(
            typeGeneratorPass.numericLiteralExpression("7"),
            typeGeneratorPass.variableExpression("X")
          ));
        typeGeneratorPass.finalize();
      },
      calls: [
        ["numericType"],
        ["typeForGlobal", "X"],
        ["typeForPair", 0, 1],
        ["typeForNumericExpression", 2],
        ["validate"]
      ],
      errors: []

    },
    {
      description: "BGCOLOR statement",
      run: function() {
        typeGeneratorPass.bgColor(
          typeGeneratorPass.numericLiteralExpression("7"));
        typeGeneratorPass.finalize();
      },
      calls: [
        ["numericType"],
        ["typeForNumericExpression", 0],
        ["validate"]
      ],
      errors: []
    },
    {
      description: "BGCOLOR statement with expression",
      run: function() {
        typeGeneratorPass.bgColor(
          typeGeneratorPass.additionExpression(
            typeGeneratorPass.numericLiteralExpression("7"),
            typeGeneratorPass.variableExpression("X")
          ));
        typeGeneratorPass.finalize();
      },
      calls: [
        ["numericType"],
        ["typeForGlobal","X"],
        ["typeForPair", 0, 1],
        ["typeForNumericExpression", 2],
        ["validate"]
      ],
      errors: []

    },
    {
      description: "CLEAR statement",
      run: function() {
        typeGeneratorPass.clear();
        typeGeneratorPass.finalize();
      },
      calls: [
        ["validate"]
      ],
      errors: []
    },
    {
      description: "INPUT statement",
      run: function() {
        typeGeneratorPass.input("Q");
        typeGeneratorPass.finalize();
      },
      calls: [
        ["typeForGlobal", "Q"],
        ["typeForStringExpression", 0],
        ["validate"]
      ],
      errors: []
    },
    {
      description: "PLAY statement",
      run: function() {
        typeGeneratorPass.play(typeGeneratorPass.stringLiteralExpression("ABC"));
        typeGeneratorPass.finalize();
      },
      calls: [
        ["stringType"],
        ["typeForStringExpression", 0],
        ["validate"]
      ],
      errors: []
    },
    {
      description: "Sleep statement",
      run: function() {
        typeGeneratorPass.sleep(typeGeneratorPass.numericLiteralExpression(7));
        typeGeneratorPass.finalize();
      },
      calls: [
        ["numericType"],
        ["typeForNumericExpression", 0],
        ["validate"]
      ],
      errors: []
    },
    {
      description: "Assignment",
      run: function() {
        typeGeneratorPass.letStatement("A",
                                       typeGeneratorPass.variableExpression("B"));
        typeGeneratorPass.finalize();
      },
      calls: [
        ["typeForGlobal", "B"],
        ["typeForGlobal", "A"],
        ["typeForPair", 0, 1],
        ["validate"]
      ],
      errors: []
    },
    {
      description: "Assignment from string literal",
      run: function() {
        typeGeneratorPass.letStatement("A",
                                       typeGeneratorPass.stringLiteralExpression("B"));
        typeGeneratorPass.finalize();
      },
      calls: [
        ["stringType"],
        ["typeForGlobal", "A"],
        ["typeForPair", 0, 1],
        ["validate"]
      ],
      errors: []
    },
    {
      description: "Assignment from numeric literal",
      run: function() {
        typeGeneratorPass.letStatement("A",
                                       typeGeneratorPass.numericLiteralExpression("1"));
        typeGeneratorPass.finalize();
      },
      calls: [
        ["numericType"],
        ["typeForGlobal", "A"],
        ["typeForPair", 0, 1],
        ["validate"]
      ],
      errors: []
    },
    {
      description: "Assignment from numeric addition",
      run: function() {
        typeGeneratorPass.letStatement("A",
                                       typeGeneratorPass.additionExpression(
                                         typeGeneratorPass.numericLiteralExpression("1"),
                                         typeGeneratorPass.numericLiteralExpression("2"))
                                       );
        typeGeneratorPass.finalize();
      },
      calls: [
        ["numericType"],
        ["numericType"],
        ["typeForPair", 0, 1],
        ["typeForGlobal", "A"],
        ["typeForPair", 2, 3],
        ["validate"]
      ],
      errors: []
    },
    {
      description: "Assignment from string addition",
      run: function() {
        typeGeneratorPass.letStatement("A",
                                       typeGeneratorPass.additionExpression(
                                         typeGeneratorPass.stringLiteralExpression("Foo"),
                                         typeGeneratorPass.stringLiteralExpression("Bar"))
                                       );
        typeGeneratorPass.finalize();
      },
      calls: [
        ["stringType"],
        ["stringType"],
        ["typeForPair", 0, 1],
        ["typeForGlobal", "A"],
        ["typeForPair", 2, 3],
        ["validate"]
      ],
      errors: []
    },
    {
      description: "Assignment from subtraction",
      run: function() {
        typeGeneratorPass.letStatement("A",
                                       typeGeneratorPass.subtractionExpression(
                                         typeGeneratorPass.numericLiteralExpression("1"),
                                         typeGeneratorPass.numericLiteralExpression("2"))
                                       );
        typeGeneratorPass.finalize();
      },
      calls: [
        ["numericType"],
        ["numericType"],
        ["typeForNumericExpression", 0],
        ["typeForNumericExpression", 1],
        ["typeForPair", 2, 3],
        ["typeForGlobal", "A"],
        ["typeForPair", 4, 5],
        ["validate"]
      ],
      errors: []
    },
    {
      description: "Assignment from multiplication",
      run: function() {
        typeGeneratorPass.letStatement("A",
                                       typeGeneratorPass.multiplicationExpression(
                                         typeGeneratorPass.numericLiteralExpression("1"),
                                         typeGeneratorPass.numericLiteralExpression("2"))
                                       );
        typeGeneratorPass.finalize();
      },
      calls: [
        ["numericType"],
        ["numericType"],
        ["typeForNumericExpression", 0],
        ["typeForNumericExpression", 1],
        ["typeForPair", 2, 3],
        ["typeForGlobal", "A"],
        ["typeForPair", 4, 5],
        ["validate"]
      ],
      errors: []
    },
    {
      description: "Assignment from division",
      run: function() {
        typeGeneratorPass.letStatement("A",
                                       typeGeneratorPass.divisionExpression(
                                         typeGeneratorPass.numericLiteralExpression("1"),
                                         typeGeneratorPass.numericLiteralExpression("2"))
                                       );
        typeGeneratorPass.finalize();
      },
      calls: [
        ["numericType"],
        ["numericType"],
        ["typeForNumericExpression", 0],
        ["typeForNumericExpression", 1],
        ["typeForPair", 2, 3],
        ["typeForGlobal", "A"],
        ["typeForPair", 4, 5],
        ["validate"]
      ],
      errors: []
    },
    {
      description: "Assignment from ABS",
      run: function() {
        typeGeneratorPass.letStatement("A",
                                       typeGeneratorPass.absBuiltinExpression(
                                         typeGeneratorPass.numericLiteralExpression("1"))
                                      );
        typeGeneratorPass.finalize();
      },
      calls: [
        ["numericType"],
        ["typeForNumericExpression", 0],
        ["numericType"],
        ["typeForGlobal", "A"],
        ["typeForPair", 2, 3],
        ["validate"]
      ],
      errors: []
    },
    {
      description: "Assignment from CINT",
      run: function() {
        typeGeneratorPass.letStatement("A",
                                       typeGeneratorPass.cintBuiltinExpression(
                                         typeGeneratorPass.numericLiteralExpression("1"))
                                      );
        typeGeneratorPass.finalize();
      },
      calls: [
        ["numericType"],
        ["typeForNumericExpression", 0],
        ["numericType"],
        ["typeForGlobal", "A"],
        ["typeForPair", 2, 3],
        ["validate"]
      ],
      errors: []
    },
    {
      description: "Assignment from FIX",
      run: function() {
        typeGeneratorPass.letStatement("A",
                                       typeGeneratorPass.fixBuiltinExpression(
                                         typeGeneratorPass.numericLiteralExpression("1"))
                                      );
        typeGeneratorPass.finalize();
      },
      calls: [
        ["numericType"],
        ["typeForNumericExpression", 0],
        ["numericType"],
        ["typeForGlobal", "A"],
        ["typeForPair", 2, 3],
        ["validate"]
      ],
      errors: []
    },
    {
      description: "Assignment from INT",
      run: function() {
        typeGeneratorPass.letStatement("A",
                                       typeGeneratorPass.intBuiltinExpression(
                                         typeGeneratorPass.numericLiteralExpression("1"))
                                      );
        typeGeneratorPass.finalize();
      },
      calls: [
        ["numericType"],
        ["typeForNumericExpression", 0],
        ["numericType"],
        ["typeForGlobal", "A"],
        ["typeForPair", 2, 3],
        ["validate"]
      ],
      errors: []
    },
    {
      description: "Assignment from LEFT$",
      run: function() {
        typeGeneratorPass.letStatement("A",
                                       typeGeneratorPass.leftzBuiltinExpression(
                                         typeGeneratorPass.stringLiteralExpression("something"),
                                         typeGeneratorPass.numericLiteralExpression("1"))
                                      );
        typeGeneratorPass.finalize();
      },
      calls: [
        ["stringType"],
        ["numericType"],
        ["typeForStringExpression", 0],
        ["typeForNumericExpression", 1],
        ["stringType"],
        ["typeForGlobal", "A"],
        ["typeForPair", 4, 5],
        ["validate"]
      ],
      errors: []
    },
    {
      description: "Assignment from RIGHT$",
      run: function() {
        typeGeneratorPass.letStatement("A",
                                       typeGeneratorPass.rightzBuiltinExpression(
                                         typeGeneratorPass.stringLiteralExpression("something"),
                                         typeGeneratorPass.numericLiteralExpression("1"))
                                      );
        typeGeneratorPass.finalize();
      },
      calls: [
        ["stringType"],
        ["numericType"],
        ["typeForStringExpression", 0],
        ["typeForNumericExpression", 1],
        ["stringType"],
        ["typeForGlobal", "A"],
        ["typeForPair", 4, 5],
        ["validate"]
      ],
      errors: []
    },
    {
      description: "Assignment from LEN",
      run: function() {
        typeGeneratorPass.letStatement("A",
                                       typeGeneratorPass.lenBuiltinExpression(
                                         typeGeneratorPass.stringLiteralExpression("something"))
                                      );
        typeGeneratorPass.finalize();
      },
      calls: [
        ["stringType"],
        ["typeForStringExpression", 0],
        ["numericType"],
        ["typeForGlobal", "A"],
        ["typeForPair", 2, 3],
        ["validate"]
      ],
      errors: []
    },
    {
      description: "Assignment from STR$",
      run: function() {
        typeGeneratorPass.letStatement("A",
                                       typeGeneratorPass.strzBuiltinExpression(
                                         typeGeneratorPass.numericLiteralExpression("1001"))
                                      );
        typeGeneratorPass.finalize();
      },
      calls: [
        ["numericType"],
        ["typeForNumericExpression", 0],
        ["stringType"],
        ["typeForGlobal", "A"],
        ["typeForPair", 2, 3],
        ["validate"]
      ],
      errors: []
    },
    {
      description: "Assignment from VAL",
      run: function() {
        typeGeneratorPass.letStatement("A",
                                       typeGeneratorPass.valBuiltinExpression(
                                         typeGeneratorPass.stringLiteralExpression("100"))
                                      );
        typeGeneratorPass.finalize();
      },
      calls: [
        ["stringType"],
        ["typeForStringExpression", 0],
        ["numericType"],
        ["typeForGlobal", "A"],
        ["typeForPair", 2, 3],
        ["validate"]
      ],
      errors: []
    },
    {
      description: "Assignment from RANDOM",
      run: function() {
        typeGeneratorPass.letStatement("A",
                                       typeGeneratorPass.randomBuiltinExpression(
                                         typeGeneratorPass.numericLiteralExpression("1"),
                                         typeGeneratorPass.numericLiteralExpression("100"))
                                      );
        typeGeneratorPass.finalize();
      },
      calls: [
        ["numericType"],
        ["numericType"],
        ["typeForNumericExpression", 0],
        ["typeForNumericExpression", 1],
        ["numericType"],
        ["typeForGlobal", "A"],
        ["typeForPair", 4, 5],
        ["validate"]
      ],
      errors: []
    },
    {
      description: "Assignment from PI",
      run: function() {
        typeGeneratorPass.letStatement("A",
                                       typeGeneratorPass.piBuiltinExpression()
                                      );
        typeGeneratorPass.finalize();
      },
      calls: [
        ["numericType"],
        ["typeForGlobal", "A"],
        ["typeForPair", 0, 1],
        ["validate"]
      ],
      errors: []
    }
];


  function expectationToTestFunc(expectation) {
    return expectation.run;
  }

  function expectationText(expectation) {
    return expectation.run.toString();
  }

  function getCallLog() {
    return typeManager.getLog();
  }

  function getErrorLog() {
    return logger.getLog();
  }


  var tester = MatchingTester(display, setup, expectations, expectationToTestFunc, expectationText, getCallLog, getErrorLog);
  return tester;
}
