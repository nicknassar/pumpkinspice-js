function ParserTests(display) {
  {{parser.js}}
  {{testing_compiler_pass.js}}

  // List of code to parse, the expected calls into the handler,
  // and the expected errors

  // The testing compiler pass returns the number of
  // an expression, so values that are from expressions
  // refer to the order in which handler functions were called
  var expectations = [
    {
      // Test simple print statements
      description: "Simple PRINT statement",
      code: "PRINT \"Hello World!\"\n" +
            "PRINT\n" +
            "PRINT \"No newline\";\n" +
            "PRINT;\n" +
            "PAUSE \"Press any key\"\n" +
            "PAUSE\n" +
            "PAUSE \"Press any key\";\n" +
            "PAUSE;\n",
      parsed: [
        ["printString", "Hello World!", true, false],
        ["printString", "", true, false],
        ["printString", "No newline", false, false],
        ["printString", "", false, false],
        ["printString", "Press any key", true, true],
        ["printString", "", true, true],
        ["printString", "Press any key", false, true],
        ["printString", "", false, true],
        ["finalize"]
      ],
      errors: []
    },
    {
      description: "Comments",
      code: "REM this is a comment\n" +
            "' comment 2\n" +
            "REM\n" +
            "'\n",
      parsed: [
        ["comment","this is a comment"],
        ["comment","comment 2"],
        ["comment",""],
        ["comment",""],
        ["finalize"]
      ],
      errors: []
    },
    {
      description: "Tokenizer Errors",
      code: "PRINT\n" +
            "PRINT \"\n" +
            "PRINT \"\"\"\n" +
            "% invalid line\n" +
            "PRINT \"good\"",
      parsed: [
        ["printString", "", true, false],
        ["printString", "good", true, false],
        ["finalize"]
      ],
      errors: [
        [2, "unterminated string"],
        [3, "unterminated string"],
        [4, "unrecognized character"]
      ]
    },
    {
      description: "PRINT paren expression",
      code: "PRINT (\"parens\")\n" +
        "PRINT (\"parens\");\n" +
        "PAUSE (\"parens\")\n" +
        "PAUSE (\"parens\");\n",
      parsed: [
        ["stringLiteralExpression", "parens"],
        ["parenExpression", 0],
        ["printExp", 1, true, false],
        ["stringLiteralExpression", "parens"],
        ["parenExpression", 3],
        ["printExp", 4, false, false],
        ["stringLiteralExpression", "parens"],
        ["parenExpression", 6],
        ["printExp", 7, true, true],
        ["stringLiteralExpression", "parens"],
        ["parenExpression", 9],
        ["printExp", 10, false, true],
        ["finalize"]
      ],
      errors: []
    },
    {
      description: "PRINT string concatenation expression",
      code: "PRINT \"string\" + \"concatenation\"\n" +
        "PRINT \"string\"+\"concatenation\";\n" +
        "PAUSE \"string\" + \"concatenation\"\n" +
        "PAUSE \"string\"+\"concatenation\";\n",
      parsed: [
        ["stringLiteralExpression", "string"],
        ["stringLiteralExpression", "concatenation"],
        ["additionExpression", 0, 1],
        ["printExp", 2, true, false],
        ["stringLiteralExpression", "string"],
        ["stringLiteralExpression", "concatenation"],
        ["additionExpression", 4, 5],
        ["printExp", 6, false, false],
        ["stringLiteralExpression", "string"],
        ["stringLiteralExpression", "concatenation"],
        ["additionExpression", 8, 9],
        ["printExp", 10, true, true],
        ["stringLiteralExpression", "string"],
        ["stringLiteralExpression", "concatenation"],
        ["additionExpression", 12, 13],
        ["printExp", 14, false, true],
        ["finalize"]
      ],
      errors: []
    },
    {
      description: "PRINT string multi concatenation expression",
      code: "PRINT \"multi\" + \"string\" + \"concatenation\"\n" ,
      parsed: [
        ["stringLiteralExpression", "multi"],
        ["stringLiteralExpression", "string"],
        ["additionExpression", 0, 1],
        ["stringLiteralExpression", "concatenation"],
        ["additionExpression", 2, 3],
        ["printExp", 4, true, false],
        ["finalize"]
      ],
      errors: []
    },
    {
      description: "PRINT string multi parents expression",
      code: "PRINT ((\"parens\"))\n",
      parsed: [
        ["stringLiteralExpression", "parens"],
        ["parenExpression", 0],
        ["parenExpression", 1],
        ["printExp", 2, true, false],
        ["finalize"]
      ],
      errors: []
    },
    {
      description: "PRINT string parens concatenation expression",
      code: "PRINT (\"string\" + \"concatenation\")\n" ,
      parsed: [
        ["stringLiteralExpression", "string"],
        ["stringLiteralExpression", "concatenation"],
        ["additionExpression", 0, 1],
        ["parenExpression", 2],
        ["printExp", 3, true, false],
        ["finalize"]
      ],
      errors: []
    },
    {
      description: "PRINT string variable expression",
      code: "PRINT variable\n" ,
      parsed: [
        ["variableExpression", "VARIABLE"],
        ["printExp", 0, true, false],
        ["finalize"]
      ],
      errors: []
    },
    {
      description: "PRINT string variable expression concatenation",
      code: "PRINT variable+\"literal\"\n" ,
      parsed: [
        ["variableExpression", "VARIABLE"],
        ["stringLiteralExpression", "literal"],
        ["additionExpression", 0, 1],
        ["printExp", 2, true, false],
        ["finalize"]
      ],
      errors: []
    },
    {
      description: "PRINT string parens variable expression",
      code: "PRINT (variable)\n" ,
      parsed: [
        ["variableExpression", "VARIABLE"],
        ["parenExpression", 0],
        ["printExp", 1, true, false],
        ["finalize"]
      ],
      errors: []
    },
    {
      description: "PRINT string expression errors",
      code: "PRINT >\n" +
        "PRINT (>)\n" +
        "PRINT (\"mismatch\"",
      parsed: [
        ["finalize"]
      ],
      errors: [
        [1, "Invalid expression"],
        [2, "Invalid expression"],
        [3, "Invalid expression"]
      ]
    },
    {
      description: "Assignment",
      code: "A = B\n" +
        "C = 7\n" +
        "D = \"string\"\n",
      parsed: [
        ["variableExpression","B"],
        ["letStatement", "A", 0],
        ["numericLiteralExpression", 7],
        ["letStatement", "C", 2],
        ["stringLiteralExpression", "string"],
        ["letStatement", "D", 4],
        ["finalize"]
      ],
      errors: []
    },
    {
      description: "Assignment of binary expressions",
      code: "A = 100+101\n" +
        "A = 100-101\n" +
        "A = 100*101\n" +
        "A = 100/101\n",
      parsed: [
        ["numericLiteralExpression", 100],
        ["numericLiteralExpression", 101],
        ["additionExpression", 0, 1],
        ["letStatement", "A", 2],
        ["numericLiteralExpression", 100],
        ["numericLiteralExpression", 101],
        ["subtractionExpression", 4, 5],
        ["letStatement", "A", 6],
        ["numericLiteralExpression", 100],
        ["numericLiteralExpression", 101],
        ["multiplicationExpression", 8, 9],
        ["letStatement", "A", 10],
        ["numericLiteralExpression", 100],
        ["numericLiteralExpression", 101],
        ["divisionExpression", 12, 13],
        ["letStatement", "A", 14],
        ["finalize"]
      ],
      errors: []
    },
    {
      description: "Numeric literal forms",
      code: "A = +7\n" +
        "A = -7\n" +
        "A = .7\n" +
        "A = +.7\n" +
        "A = -.7\n" +
        "A = 7.7\n" +
        "A = -7.7\n" +
        "A = +7.7\n" +
        "A = +1 +1\n" +
        "A = -1 +1\n" +
        "A = (7)+1\n",
      parsed: [
        ["numericLiteralExpression", 7],
        ["letStatement", "A", 0],
        ["numericLiteralExpression", -7],
        ["letStatement", "A", 2],
        ["numericLiteralExpression", 0.7],
        ["letStatement", "A", 4],
        ["numericLiteralExpression", 0.7],
        ["letStatement", "A", 6],
        ["numericLiteralExpression", -0.7],
        ["letStatement", "A", 8],
        ["numericLiteralExpression", 7.7],
        ["letStatement", "A", 10],
        ["numericLiteralExpression", -7.7],
        ["letStatement", "A", 12],
        ["numericLiteralExpression", 7.7],
        ["letStatement", "A", 14],
        ["numericLiteralExpression" ,1],
        ["numericLiteralExpression", 1],
        ["additionExpression", 16, 17],
        ["letStatement", "A", 18],
        ["numericLiteralExpression", -1],
        ["numericLiteralExpression", 1],
        ["additionExpression", 20, 21],
        ["letStatement", "A", 22],
        ["numericLiteralExpression", 7],
        ["parenExpression", 24],
        ["numericLiteralExpression", 1],
        ["additionExpression", 25, 26],
        ["letStatement", "A", 27],
        ["finalize"]
      ],
      errors: []
    },
    {
      description: "Assignment of binary expressions after parens",
      code: "A = (100)+101\n" +
        "A = (100)-101\n" +
        "A = (100)*101\n" +
        "A = (100)/101\n",
      parsed: [
        ["numericLiteralExpression", 100],
        ["parenExpression", 0],
        ["numericLiteralExpression", 101],
        ["additionExpression", 1, 2],
        ["letStatement", "A", 3],
        ["numericLiteralExpression", 100],
        ["parenExpression", 5],
        ["numericLiteralExpression", 101],
        ["subtractionExpression", 6, 7],
        ["letStatement", "A", 8],
        ["numericLiteralExpression", 100],
        ["parenExpression", 10],
        ["numericLiteralExpression", 101],
        ["multiplicationExpression", 11, 12],
        ["letStatement", "A", 13],
        ["numericLiteralExpression", 100],
        ["parenExpression", 15],
        ["numericLiteralExpression", 101],
        ["divisionExpression", 16, 17],
        ["letStatement", "A", 18],
        ["finalize"]
      ],
      errors: []
    },
    {
      //'ABS','CINT','FIX','INT','LEFT$','LEN','RIGHT$','STR$','VAL','RANDOM'
      description: "Assignment of built-in functions",
      code: "A = ABS(100)\n" +
        "A = CINT(100)\n" +
        "A = FIX(100)\n" +
        "A = INT(100)\n" +
        "A = LEFT$(\"string\", 1)\n" +
        "A = RIGHT$(\"string\", 1)\n" +
        "A = LEN(\"string\")\n" +
        "A = STR$(100)\n" +
        "A = VAL(\"100\")\n" +
        "A = RANDOM(100, 200)\n",
      parsed: [
        ["numericLiteralExpression", 100],
        ["absBuiltinExpression", 0],
        ["letStatement", "A", 1],
        ["numericLiteralExpression", 100],
        ["cintBuiltinExpression", 3],
        ["letStatement", "A", 4],
        ["numericLiteralExpression", 100],
        ["fixBuiltinExpression", 6],
        ["letStatement", "A", 7],
        ["numericLiteralExpression", 100],
        ["intBuiltinExpression", 9],
        ["letStatement", "A", 10],
        ["stringLiteralExpression", "string"],
        ["numericLiteralExpression", 1],
        ["leftzBuiltinExpression", 12, 13],
        ["letStatement", "A", 14],
        ["stringLiteralExpression", "string"],
        ["numericLiteralExpression", 1],
        ["rightzBuiltinExpression", 16, 17],
        ["letStatement", "A", 18],
        ["stringLiteralExpression", "string"],
        ["lenBuiltinExpression", 20],
        ["letStatement", "A", 21],
        ["numericLiteralExpression", 100],
        ["strzBuiltinExpression", 23],
        ["letStatement", "A", 24],
        ["stringLiteralExpression", "100"],
        ["valBuiltinExpression", 26],
        ["letStatement", "A", 27],
        ["numericLiteralExpression", 100],
        ["numericLiteralExpression", 200],
        ["randomBuiltinExpression", 29, 30],
        ["letStatement", "A", 31],
        ["finalize"]
      ],
      errors: []
    },
    {
      description: "Expression errors",
      code: "A = ABS()\n" +
        "A = ABS\n" +
        "A = ABS(\n" +
        "A = ABS)\n" +
        "A = ABS 7\n" +
        "A = RANDOM()\n" +
        "A = RANDOM(,)\n" +
        "A = RANDOM(100,)\n" +
        "A = RANDOM(100)\n" +
        "A = RANDOM(,100)\n" +
        "A = ABS(77)FROG",

      parsed: [
        // ABS(77)
        ["numericLiteralExpression", 77],
        ["absBuiltinExpression", 0],
        ["finalize"]
      ],
      errors: [
        [1, "Missing param"],
        [2, "Missing param"],
        [3, "Missing param"],
        [4, "Missing param"],
        [5, "Missing param"],
        [6, "Missing first param"],
        [6, "Missing second param"],
        [7, "Missing first param"],
        [7, "Missing second param"],
        [8, "Missing second param"],
        [9, "Missing second param"],
        [10, "Missing first param"],
        [11, "Invalid expression"]
      ]
    },
    {
      description: "Subroutine basics",
      code: "SUBROUTINE foo\n" +
        "END SUBROUTINE\n" +
        "SUBROUTINE Bar Biz\n" +
        "END SUBROUTINE\n" +
        "SUBROUTINE BOOZ GIN, rum\n" +
        "END SUBROUTINE\n" +
        "CALL Foo\n" +
        "CALL BAR None\n" +
        "CALL booz 12, \"boo\"\n"+
        "A = CALL FOO\n" +
        "A = CALL bar None\n" +
        "A = CALL Booz 12, \"boo\"\n",
      parsed: [
        ["beginSubroutine", "FOO", []],
        ["endSubroutine"],
        ["beginSubroutine", "BAR", ["BIZ"]],
        ["endSubroutine"],
        ["beginSubroutine", "BOOZ", ["GIN", "RUM"]],
        ["endSubroutine"],
        ["callSubroutine", "FOO", []],
        ["variableExpression", "NONE"],
        ["callSubroutine", "BAR", [7]],
        ["numericLiteralExpression", 12],
        ["stringLiteralExpression", "boo"],
        ["callSubroutine", "BOOZ", [9, 10]],
        ["callSubroutineExpression", "FOO", []],
        ["letStatement", "A", 12],
        ["variableExpression", "NONE"],
        ["callSubroutineExpression", "BAR", [14]],
        ["letStatement", "A", 15],
        ["numericLiteralExpression", 12],
        ["stringLiteralExpression", "boo"],
        ["callSubroutineExpression", "BOOZ", [17, 18]],
        ["letStatement", "A", 19],
        ["finalize"]
      ],
      errors: []
    },
    {
      description: "CALL expressions",
      code: "PRINT CALL Foo\n" +
	"A = CALL FOO+77\n" +
	"A = CALL foo-88\n" +
	"A = CALL foo(77)-88\n" +
	"A = CALL foo(77)-88,bar\n" +
	"A = CALL foo(77)-88,bar+99\n" +
	"A = CALL foo(\"biz\"),boz\n" +
        "PRINT CALL FOO bar, \"biz\", (baz)*2\n" +
        "PRINT (CALL FOO \"a\"+\"b\")+\"c\"\n"+
        "IF CALL PLUSONE (CALL PLUSONE 1) != CALL PLUSONE 2 THEN\n"+
        "END IF\n",
      parsed: [
	["callSubroutineExpression", "FOO", []],
	["printExp", 0, true, false],
	["numericLiteralExpression", "77"],
	["callSubroutineExpression", "FOO", [2]],
	["letStatement", "A", 3],
	["numericLiteralExpression", "-88"],
	["callSubroutineExpression", "FOO", [5]],
	["letStatement", "A", 6],
	["numericLiteralExpression", "77"],
	["parenExpression", 8],
	["numericLiteralExpression", "88"],
	["subtractionExpression", 9, 10],
	["callSubroutineExpression", "FOO", [11]],
	["letStatement", "A", 12],
	["numericLiteralExpression", "77"],
	["parenExpression", 14],
	["numericLiteralExpression", "88"],
	["subtractionExpression", 15, 16],
	["variableExpression", "BAR"],
	["callSubroutineExpression", "FOO", [17, 18]],
	["letStatement", "A", 19],
	["numericLiteralExpression", "77"],
	["parenExpression", 21],
	["numericLiteralExpression", "88"],
	["subtractionExpression", 22, 23],
	["variableExpression", "BAR"],
	["numericLiteralExpression", "99"],
	["additionExpression", 25, 26],
	["callSubroutineExpression", "FOO", [24, 27]],
	["letStatement", "A", 28],
	["stringLiteralExpression", "biz"],
	["parenExpression", 30],
	["variableExpression", "BOZ"],
	["callSubroutineExpression", "FOO", [31, 32]],
	["letStatement", "A", 33],
	["variableExpression", "BAR"],
	["stringLiteralExpression", "biz"],
	["variableExpression", "BAZ"],
	["parenExpression", 37],
	["numericLiteralExpression", "2"],
	["multiplicationExpression", 38, 39],
	["callSubroutineExpression", "FOO", [35, 36, 40]],
	["printExp", 41, true, false],
	["stringLiteralExpression", "a"],
	["stringLiteralExpression", "b"],
	["additionExpression", 43, 44],
	["callSubroutineExpression", "FOO", [45]],
	["parenExpression", 46],
	["stringLiteralExpression", "c"],
	["additionExpression", 47, 48],
	["printExp", 49, true, false],
        ["numericLiteralExpression", "1"],
        ["callSubroutineExpression", "PLUSONE", [51]],
        ["parenExpression", 52],
        ["callSubroutineExpression", "PLUSONE", [53]],
        ["numericLiteralExpression", "2"],
        ["callSubroutineExpression", "PLUSONE", [55]],
        ["boolNotEqualExpression", 54, 56],
        ["ifStatement", 57],
        ["endIf"],
	["finalize"]
      ],
      errors: []
    },
    {
      description: "numeric infix operator precedence",
      code: "A = 88+66*77\n" +
	"A = 66*77+88\n" +
        "A = 88-66/77\n" +
        "A = 44-55+66/77*88-99+33\n",
      parsed: [
	["numericLiteralExpression", "88"],
	["numericLiteralExpression", "66"],
	["numericLiteralExpression", "77"],
	["multiplicationExpression", 1, 2],
	["additionExpression", 0, 3],
	["letStatement", "A", 4],
	["numericLiteralExpression", "66"],
	["numericLiteralExpression", "77"],
	["multiplicationExpression", 6, 7],
        ["numericLiteralExpression", "88"],
	["additionExpression", 8, 9],
	["letStatement", "A", 10],
        ["numericLiteralExpression", "88"],
        ["numericLiteralExpression", "66"],
        ["numericLiteralExpression", "77"],
        ["divisionExpression", 13, 14],
        ["subtractionExpression", 12, 15],
        ["letStatement", "A", 16],
        ["numericLiteralExpression", "44"],
        ["numericLiteralExpression", "55"],
        ["subtractionExpression", 18, 19],
        ["numericLiteralExpression", "66"],
        ["numericLiteralExpression", "77"],
        ["divisionExpression", 21, 22],
        ["numericLiteralExpression", "88"],
        ["multiplicationExpression", 23, 24],
        ["additionExpression", 20, 25],
        ["numericLiteralExpression", "99"],
        ["subtractionExpression", 26, 27],
        ["numericLiteralExpression", "33"],
        ["additionExpression", 28, 29],
        ["letStatement", "A", 30],
	["finalize"]
      ],
      errors: []
    },
    {
      description: "Simple IF statement",
      code: "IF 77 = 88\n" +
        "PRINT\n" +
        "END IF\n" +
        "IF \"a\" == Seven\n" +
        "PRINT\n" +
        "END IF\n" +
        "IF Q > 88 THEN\n" +
        "PRINT\n" +
        "END IF\n" +
        "IF 77 < Z\n" +
        "PRINT\n" +
        "END IF\n" +
        "IF 77 >= 88\n" +
        "PRINT\n" +
        "END IF\n" +
        "IF 77 <= 88\n" +
        "PRINT\n" +
        "END IF\n" +
        "IF 77 <> 88\n" +
        "PRINT\n" +
        "END IF\n",
      parsed: [
        ["numericLiteralExpression", "77"],
        ["numericLiteralExpression", "88"],
        ["boolEqualExpression", 0, 1],
        ["ifStatement", 2],
        ["printString", "", true, false],
        ["endIf"],
        ["stringLiteralExpression", "a"],
        ["variableExpression", "SEVEN"],
        ["boolEqualExpression", 6, 7],
        ["ifStatement", 8],
        ["printString", "", true, false],
        ["endIf"],
        ["variableExpression", "Q"],
        ["numericLiteralExpression", "88"],
        ["boolGreaterExpression", 12, 13],
        ["ifStatement", 14],
        ["printString", "", true, false],
        ["endIf"],
        ["numericLiteralExpression", "77"],
        ["variableExpression", "Z"],
        ["boolLessExpression", 18, 19],
        ["ifStatement", 20],
        ["printString", "", true, false],
        ["endIf"],
        ["numericLiteralExpression", "77"],
        ["numericLiteralExpression", "88"],
        ["boolGreaterOrEqualExpression", 24, 25],
        ["ifStatement", 26],
        ["printString", "", true, false],
        ["endIf"],
        ["numericLiteralExpression", "77"],
        ["numericLiteralExpression", "88"],
        ["boolLessOrEqualExpression", 30, 31],
        ["ifStatement", 32],
        ["printString", "", true, false],
        ["endIf"],
        ["numericLiteralExpression", "77"],
        ["numericLiteralExpression", "88"],
        ["boolNotEqualExpression", 36, 37],
        ["ifStatement", 38],
        ["printString", "", true, false],
        ["endIf"],
        ["finalize"]
      ],
      errors: []
    },
    {
      description: "Boolean comparison operator precedence",
      code: "IF 7*8 > 7+8 THEN\n" +
        "END IF\n" +
        "IF SIX+42 > 7*EIGHTYEIGHT THEN\n" +
        "END IF\n" +
        "IF 6+7*8 > 7*8+9 THEN\n" +
        "END IF\n" +
        "IF A+B+\"C\" = \"a\"+\"A\"+\"a\" THEN\n" +
        "END IF\n",
      parsed: [
        ["numericLiteralExpression", "7"],
        ["numericLiteralExpression", "8"],
        ["multiplicationExpression", 0, 1],
        ["numericLiteralExpression", "7"],
        ["numericLiteralExpression", "8"],
        ["additionExpression", 3, 4],
        ["boolGreaterExpression", 2, 5],
        ["ifStatement", 6],
        ["endIf"],
        ["variableExpression", "SIX"],
        ["numericLiteralExpression", "42"],
        ["additionExpression", 9, 10],
        ["numericLiteralExpression", "7"],
        ["variableExpression", "EIGHTYEIGHT"],
        ["multiplicationExpression", 12, 13],
        ["boolGreaterExpression", 11, 14],
        ["ifStatement", 15],
        ["endIf"],
        ["numericLiteralExpression", "6"],
        ["numericLiteralExpression", "7"],
        ["numericLiteralExpression", "8"],
        ["multiplicationExpression", 19, 20],
        ["additionExpression", 18, 21],
        ["numericLiteralExpression", "7"],
        ["numericLiteralExpression", "8"],
        ["multiplicationExpression", 23, 24],
        ["numericLiteralExpression", "9"],
        ["additionExpression", 25, 26],
        ["boolGreaterExpression", 22, 27],
        ["ifStatement", 28],
        ["endIf"],
        ["variableExpression", "A"],
        ["variableExpression", "B"],
        ["additionExpression", 31, 32],
        ["stringLiteralExpression", "C"],
        ["additionExpression", 33, 34],
        ["stringLiteralExpression", "a"],
        ["stringLiteralExpression", "A"],
        ["additionExpression", 36, 37],
        ["stringLiteralExpression", "a"],
        ["additionExpression", 38, 39],
        ["boolEqualExpression", 35, 40],
        ["ifStatement", 41],
        ["endIf"],
        ["finalize"],
      ],
      errors: []
    },
    {
      description: "Boolean AND and OR operator precedence",
      code: "If 66 > 77 OR 88 > 99 THEN\n" +
        "END IF\n"+
        "If 66 > 77 AND 88 > 99 THEN\n" +
        "END IF\n"+
        "If 66+77 > 66-77 OR 88*99 > 88/99 THEN\n" +
        "END IF\n"+
        "If A < B OR C >= D AND E >= F\n" +
        "END IF\n" +
        "If A <= B AND C != D OR E == F\n" +
        "END IF\n",
      parsed: [
        ["numericLiteralExpression", "66"],
        ["numericLiteralExpression", "77"],
        ["boolGreaterExpression", 0, 1],
        ["numericLiteralExpression", "88"],
        ["numericLiteralExpression", "99"],
        ["boolGreaterExpression", 3, 4],
        ["boolOrExpression", 2, 5],
        ["ifStatement", 6],
        ["endIf"],
        ["numericLiteralExpression", "66"],
        ["numericLiteralExpression", "77"],
        ["boolGreaterExpression", 9, 10],
        ["numericLiteralExpression", "88"],
        ["numericLiteralExpression", "99"],
        ["boolGreaterExpression", 12, 13],
        ["boolAndExpression", 11, 14],
        ["ifStatement", 15],
        ["endIf"],
        ["numericLiteralExpression", "66"],
        ["numericLiteralExpression", "77"],
        ["additionExpression", 18, 19],
        ["numericLiteralExpression", "66"],
        ["numericLiteralExpression", "77"],
        ["subtractionExpression", 21, 22],
        ["boolGreaterExpression", 20, 23],
        ["numericLiteralExpression", "88"],
        ["numericLiteralExpression", "99"],
        ["multiplicationExpression", 25, 26],
        ["numericLiteralExpression", "88"],
        ["numericLiteralExpression", "99"],
        ["divisionExpression", 28, 29],
        ["boolGreaterExpression", 27, 30],
        ["boolOrExpression", 24, 31],
        ["ifStatement", 32],
        ["endIf"],
        ["variableExpression", "A"],
        ["variableExpression", "B"],
        ["boolLessExpression", 35, 36],
        ["variableExpression", "C"],
        ["variableExpression", "D"],
        ["boolGreaterOrEqualExpression", 38, 39],
        ["variableExpression", "E"],
        ["variableExpression", "F"],
        ["boolGreaterOrEqualExpression", 41, 42],
        ["boolAndExpression", 40, 43],
        ["boolOrExpression", 37, 44],
        ["ifStatement", 45],
        ["endIf"],
        ["variableExpression", "A"],
        ["variableExpression", "B"],
        ["boolLessOrEqualExpression", 48, 49],
        ["variableExpression", "C"],
        ["variableExpression", "D"],
        ["boolNotEqualExpression", 51, 52],
        ["boolAndExpression", 50, 53],
        ["variableExpression", "E"],
        ["variableExpression", "F"],
        ["boolEqualExpression", 55, 56],
        ["boolOrExpression", 54, 57],
        ["ifStatement", 58],
        ["endIf"],
        ["finalize"]
      ],
      errors: []
    },
    {
      description: "Bool expressions with NOT",
      code: "IF NOT 77=88\n" +
        "END IF\n" +
        "IF NOT (A=77 OR B=88)\n" +
        "END IF\n" +
        "IF NOT (A=77) OR B=88\n" +
        "END IF\n" +
        "IF A=77 OR NOT(B=88)\n" +
        "END IF\n"+
        "IF NOT A=77 OR B=88 AND C=99\n" +
        "END IF\n",
      parsed: [
        ["numericLiteralExpression", "77"],
        ["numericLiteralExpression", "88"],
        ["boolEqualExpression", 0, 1],
        ["boolNotExpression", 2],
        ["ifStatement", 3],
        ["endIf"],
        ["variableExpression", "A"],
        ["numericLiteralExpression", "77"],
        ["boolEqualExpression", 6, 7],
        ["variableExpression", "B"],
        ["numericLiteralExpression", "88"],
        ["boolEqualExpression", 9, 10],
        ["boolOrExpression", 8, 11],
        ["parenExpression", 12],
        ["boolNotExpression", 13],
        ["ifStatement", 14],
        ["endIf"],
        ["variableExpression", "A"],
        ["numericLiteralExpression", "77"],
        ["boolEqualExpression", 17, 18],
        ["parenExpression", 19],
        ["boolNotExpression", 20],
        ["variableExpression", "B"],
        ["numericLiteralExpression", "88"],
        ["boolEqualExpression", 22, 23],
        ["boolOrExpression", 21, 24],
        ["ifStatement", 25],
        ["endIf"],
        ["variableExpression", "A"],
        ["numericLiteralExpression", "77"],
        ["boolEqualExpression", 28, 29],
        ["variableExpression", "B"],
        ["numericLiteralExpression", "88"],
        ["boolEqualExpression", 31, 32],
        ["parenExpression", 33],
        ["boolNotExpression", 34],
        ["boolOrExpression", 30, 35],
        ["ifStatement", 36],
        ["endIf"],
        ["variableExpression", "A"],
        ["numericLiteralExpression", "77"],
        ["boolEqualExpression", 39, 40],
        ["boolNotExpression", 41],
        ["variableExpression", "B"],
        ["numericLiteralExpression", "88"],
        ["boolEqualExpression", 43, 44],
        ["variableExpression", "C"],
        ["numericLiteralExpression", "99"],
        ["boolEqualExpression", 46, 47],
        ["boolAndExpression", 45, 48],
        ["boolOrExpression", 42, 49],
        ["ifStatement", 50],
        ["endIf"],
        ["finalize"]
      ],
      errors: []
    }
  ];

  function compareNestedLists(listA, listB) {
    if (listA.length != listB.length)
      return false;
    for (var i=0;i<listA.length;i++) {
      if (listA[i].length != listB[i].length)
        return false;
      for (var j=0;j<listA[i].length;j++) {
        // Handle list parameters - for subroutine args, etc.
        if (listA[i][j] && listA[i][j].push !== undefined) {
          if (!listB[i][j] || listB[i][j].length != listA[i][j].length)
            return false;
          for (var k=0;k<listA[i][j].length;k++) {
            if (listA[i][j][k] != listB[i][j][k])
              return false;
          }
        } else if (listA[i][j] != listB[i][j])
          return false;
      }
    }
    return true;
  }

  // Exact error messages aren't matched
  // We want to know that an error on the same line is reported
  function compareErrorLists(listA, listB) {
    if (listA.length != listB.length)
      return false;
    // First line is line number of error
    for (var i=0;i<listA.length;i++) {
      if (listA[i][0] != listB[i][0])
        return false;
    }
    return true;
  }

  function stringifyExpectedItem(item) {
    var elements = [];
    for (var i = 0;i<item.length;i++) {
      var element = item[i];
      if (element === null) {
        elements.push("null");
      } else if (element === undefined) {
        elements.push("undefined");
      } else if (element.length !== undefined) { // string or array
        if (element.push !== undefined) { // array
          elements.push("["+stringifyExpectedItem(element)+"]");
        } else { // string
          elements.push("\""+element.replace("\"","\\\"")+"\"");
        }
      } else {
        elements.push(element);
      }
    }
    return elements.join(", ");
  }
  function stringifyExpectedList(expected) {
    var lines = [];
    for (var i=0;i<expected.length;i++) {
      lines.push(stringifyExpectedItem(expected[i]));
    }
    return lines.join("\n");
  }

  function printParseMismatch(expectation, handlerLog) {
    display.setColor(4);
    display.print("Parser gave unexpected results for test "+expectation.description+":\n");
    display.setColor(7);
    display.print(expectation.code+"\n\n");
    display.setColor(15);
    display.print("expected:\n")
    display.setColor(7);
    display.print(stringifyExpectedList(expectation.parsed)+"\n");
    display.setColor(15);
    display.print("got:\n")
    display.setColor(7);
    display.print(stringifyExpectedList(handlerLog)+"\n\n");
  }

  function printErrorMismatch(expectation, errorLog) {
    display.setColor(4);
    display.print("Parser gave unexpected errors for test "+expectation.description+":\n");
    display.setColor(7);
    display.print(expectation.code+"\n");
    display.setColor(15);
    display.print("expected:\n")
    display.setColor(7);
    display.print(stringifyExpectedList(expectation.errors)+"\n");
    display.setColor(15);
    display.print("got:\n")
    display.setColor(7);
    display.print(stringifyExpectedList(errorLog)+"\n\n");
  }

  function checkResults(expectation, handlerLog, errorLog) {
    if (!compareNestedLists(expectation.parsed, handlerLog)) {
      printParseMismatch(expectation, handlerLog);
    }
    if (!compareErrorLists(expectation.errors, errorLog)) {
      printErrorMismatch(expectation, errorLog);
    }
  }

  function run() {
    for (var i=0;i<expectations.length;i++) {
      var expectation = expectations[i];
      var logger = TestingLogger();
      var handler = TestingCompilerPass();
      var compiler = Parser([handler], logger);

      // Prepend a newline so we can get the right line numbers
      compiler.compile("\n"+expectation.code);
      checkResults(expectation, handler.getLog(), logger.getLog());
    }
    display.sendUpdates();
  }
  return {run:run};
}
