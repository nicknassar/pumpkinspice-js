function ParserTests(display) {
  {{parser.js}}
  {{testing_compiler_pass.js}}

  // List of code to parse, the expected calls into the handler,
  // and the expected errors

  // The testing compiler pass returns the number of
  // an expression, so values that are from expressions
  // refer to the order in which handler functions were called
  var expectations = [
    {
      // Test simple print statements
      description: "Simple PRINT statement",
      code: "PRINT \"Hello World!\"\n" +
            "PRINT\n" +
            "PRINT \"No newline\";\n" +
            "PRINT;\n" +
            "PAUSE \"Press any key\"\n" +
            "PAUSE\n" +
            "PAUSE \"Press any key\";\n" +
            "PAUSE;\n",
      parsed: [
        ["printString", "Hello World!", true, false],
        ["printString", "", true, false],
        ["printString", "No newline", false, false],
        ["printString", "", false, false],
        ["printString", "Press any key", true, true],
        ["printString", "", true, true],
        ["printString", "Press any key", false, true],
        ["printString", "", false, true],
        ["finalize"]
      ],
      errors: []
    },
    {
      description: "Comments",
      code: "REM this is a comment\n" +
            "' comment 2\n" +
            "REM\n" +
            "'\n",
      parsed: [
        ["comment","this is a comment"],
        ["comment","comment 2"],
        ["comment",""],
        ["comment",""],
        ["finalize"]
      ],
      errors: []
    },
    {
      description: "Tokenizer Errors",
      code: "PRINT\n" +
            "PRINT \"\n" +
            "PRINT \"\"\"\n" +
            "% invalid line\n" +
            "PRINT \"good\"",
      parsed: [
        ["printString", "", true, false],
        ["printString", "good", true, false],
        ["finalize"]
      ],
      errors: [
        [2, "unterminated string"],
        [3, "unterminated string"],
        [4, "unrecognized character"]
      ]
    },
    {
      description: "PRINT paren expression",
      code: "PRINT (\"parens\")\n" +
        "PRINT (\"parens\");\n" +
        "PAUSE (\"parens\")\n" +
        "PAUSE (\"parens\");\n",
      parsed: [
        ["stringLiteralExpression", "parens"],
        ["parenExpression", 0],
        ["printExp", 1, true, false],
        ["stringLiteralExpression", "parens"],
        ["parenExpression", 3],
        ["printExp", 4, false, false],
        ["stringLiteralExpression", "parens"],
        ["parenExpression", 6],
        ["printExp", 7, true, true],
        ["stringLiteralExpression", "parens"],
        ["parenExpression", 9],
        ["printExp", 10, false, true],
        ["finalize"]
      ],
      errors: []
    },
    {
      description: "PRINT string concatenation expression",
      code: "PRINT \"string\" + \"concatenation\"\n" +
        "PRINT \"string\"+\"concatenation\";\n" +
        "PAUSE \"string\" + \"concatenation\"\n" +
        "PAUSE \"string\"+\"concatenation\";\n",
      parsed: [
        ["stringLiteralExpression", "string"],
        ["stringLiteralExpression", "concatenation"],
        ["additionExpression", 0, 1],
        ["printExp", 2, true, false],
        ["stringLiteralExpression", "string"],
        ["stringLiteralExpression", "concatenation"],
        ["additionExpression", 4, 5],
        ["printExp", 6, false, false],
        ["stringLiteralExpression", "string"],
        ["stringLiteralExpression", "concatenation"],
        ["additionExpression", 8, 9],
        ["printExp", 10, true, true],
        ["stringLiteralExpression", "string"],
        ["stringLiteralExpression", "concatenation"],
        ["additionExpression", 12, 13],
        ["printExp", 14, false, true],
        ["finalize"]
      ],
      errors: []
    },
    {
      description: "PRINT string multi concatenation expression",
      code: "PRINT \"multi\" + \"string\" + \"concatenation\"\n" ,
      parsed: [
        ["stringLiteralExpression", "multi"],
        ["stringLiteralExpression", "string"],
        ["stringLiteralExpression", "concatenation"],
        ["additionExpression", 1, 2],
        ["additionExpression", 0, 3],
        ["printExp", 4, true, false],
        ["finalize"]
      ],
      errors: []
    },
    {
      description: "PRINT string multi parents expression",
      code: "PRINT ((\"parens\"))\n",
      parsed: [
        ["stringLiteralExpression", "parens"],
        ["parenExpression", 0],
        ["parenExpression", 1],
        ["printExp", 2, true, false],
        ["finalize"]
      ],
      errors: []
    },
    {
      description: "PRINT string parens concatenation expression",
      code: "PRINT (\"string\" + \"concatenation\")\n" ,
      parsed: [
        ["stringLiteralExpression", "string"],
        ["stringLiteralExpression", "concatenation"],
        ["additionExpression", 0, 1],
        ["parenExpression", 2],
        ["printExp", 3, true, false],
        ["finalize"]
      ],
      errors: []
    },
    {
      description: "PRINT string variable expression",
      code: "PRINT text\n" ,
      parsed: [
        ["variableExpression", "TEXT"],
        ["printExp", 0, true, false],
        ["finalize"]
      ],
      errors: []
    },
    {
      description: "PRINT string variable expression concatenation",
      code: "PRINT variable+\"literal\"\n" ,
      parsed: [
        ["variableExpression", "VARIABLE"],
        ["stringLiteralExpression", "literal"],
        ["additionExpression", 0, 1],
        ["printExp", 2, true, false],
        ["finalize"]
      ],
      errors: []
    },
    {
      description: "PRINT string parens expression concatenation",
      code: "PRINT (variable)\n" ,
      parsed: [
        ["variableExpression", "VARIABLE"],
        ["parenExpression", 0],
        ["printExp", 1, true, false],
        ["finalize"]
      ],
      errors: []
    },
    {
      description: "PRINT string expression errors",
      code: "PRINT >\n" +
        "PRINT (>)\n" +
        "PRINT (\"mismatch\"",
      parsed: [
        ["finalize"]
      ],
      errors: [
        [1, "Invalid expression"],
        [2, "Invalid expression"],
        [3, "Invalid expression"]
      ]
    }
  ];

  function compareNestedLists(listA, listB) {
    if (listA.length != listB.length)
      return false;
    for (var i=0;i<listA.length;i++) {
      if (listA[i].length != listB[i].length)
        return false;
      for (var j=0;j<listA[i].length;j++) {
        if (listA[i][j] != listB[i][j])
          return false;
      }
    }
    return true;
  }

  // Exact error messages aren't matched
  // We want to know that an error on the same line is reported
  function compareErrorLists(listA, listB) {
    if (listA.length != listB.length)
      return false;
    // First line is line number of error
    for (var i=0;i<listA.length;i++) {
      if (listA[i][0] != listB[i][0])
        return false;
    }
    return true;
  }

  function printParseMismatch(expectation, handlerLog) {
    display.setColor(4);
    display.print("Parser gave unexpected results for test "+expectation.description+":\n");
    display.setColor(7);
    display.print(expectation.code+"\n\n");
    display.setColor(15);
    display.print("expected:\n")
    display.setColor(7);
    display.print(expectation.parsed.join("\n")+"\n");
    display.setColor(15);
    display.print("got:\n")
    display.setColor(7);
    display.print(handlerLog.join("\n")+"\n\n");
  }

  function printErrorMismatch(expectation, errorLog) {
    display.setColor(4);
    display.print("Parser gave unexpected errors for test "+expectation.description+":\n");
    display.setColor(7);
    display.print(expectation.code+"\n");
    display.setColor(15);
    display.print("expected:\n")
    display.setColor(7);
    display.print(expectation.errors.join("\n")+"\n");
    display.setColor(15);
    display.print("got:\n")
    display.setColor(7);
    display.print(errorLog.join("\n")+"\n\n");
  }

  function checkResults(expectation, handlerLog, errorLog) {
    if (!compareNestedLists(expectation.parsed, handlerLog)) {
      printParseMismatch(expectation, handlerLog);
    }
    if (!compareErrorLists(expectation.errors, errorLog)) {
      printErrorMismatch(expectation, errorLog);
    }
  }

  function run() {
    for (var i=0;i<expectations.length;i++) {
      var expectation = expectations[i];
      var logger = TestingLogger();
      var handler = TestingCompilerPass();
      var compiler = Parser([handler], logger);

      // Prepend a newline so we can get the right line numbers
      compiler.compile("\n"+expectation.code);
      checkResults(expectation, handler.getLog(), logger.getLog());
    }
    display.sendUpdates();
  }
  return {run:run};
}
