//   Pumpkin Spice - A simplistic language for interactive text applications
//   Copyright Â© 2020 Nicholas Nassar

//   This program is free software: you can redistribute it and/or modify
//   it under the terms of the GNU General Public License as published by
//   the Free Software Foundation, either version 3 of the License, or
//   (at your option) any later version.

//   This program is distributed in the hope that it will be useful,
//   but WITHOUT ANY WARRANTY; without even the implied warranty of
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//   GNU General Public License for more details.

//   You should have received a copy of the GNU General Public License
//   along with this program.  If not, see <https://www.gnu.org/licenses/>.


// The code is wrapped inside a function to protect namespaces
// programText - string with the program to run
// inputTextElement - The input text area
// inputSubmitElement - The input form submit button
// inputFormElement - the form associated with the inppad
// cursorElement - that which must be blinked
// quietBlockElement - text which is displayed but not to be read by a screen reader
// historyBlockElement - text which has already been displayed
// latestBlockElement - text which should be read by a screen reader
// displayBlockElement - scrollable area where text is displayed

function initPumpkinSpice(programTextParam, inputTextElementParam, inputSubmitElementParam, inputFormElementParam, cursorElementParam, quietBlockElementParam, historyBlockElementParam, latestBlockElementParam, displayBlockElementParam){

{{legacy.js}}
{{global_utilities.js}}

{{display.js}}
{{logger.js}}
{{audio.js}}
{{machine.js}}
{{type_manager.js}}
{{type_generator_pass.js}}
{{code_generator_pass.js}}
{{parser.js}}

  var globalDisplay = Display(inputFormElementParam, inputTextElementParam, inputSubmitElementParam, cursorElementParam, quietBlockElementParam, historyBlockElementParam, latestBlockElementParam, displayBlockElementParam);
  var globalLogger = Logger(globalDisplay);
  var globalAudio = Audio(globalLogger);
  var globalMachine = Machine(globalDisplay, globalAudio, globalLogger);

  var globalTypeManager = TypeManager(globalLogger);
  var handler1 = TypeGeneratorPass(globalTypeManager, globalLogger);
  var handler2 = CodeGeneratorPass(globalTypeManager, globalMachine, globalLogger);

  // parser + handlers = compiler
  var compiler = Parser([handler1, handler2],globalLogger);


  if (!compiler.compile(programTextParam)) {
    // Compilation failed
  }

  globalMachine.go();
}


{{initialize.js}}
